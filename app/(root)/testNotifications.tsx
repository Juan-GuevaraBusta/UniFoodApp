import { useAuth } from '@/hooks/useAuth';
import { useBackgroundPedidosMonitor } from '@/hooks/useBackgroundPedidosMonitor';
import { useNotifications } from '@/hooks/useNotifications';
import React from 'react';
import { Alert, ScrollView, Text, TouchableOpacity, View } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

const TestNotifications = () => {
    const { sendLocalNotification, expoPushToken } = useNotifications();
    const { user } = useAuth();
    const { isMonitoring, iniciarMonitoreo, detenerMonitoreo, lastPedidos } = useBackgroundPedidosMonitor();

    const testNotification = (title: string, body: string) => {
        try {
            sendLocalNotification(title, body, {
                type: 'test',
                timestamp: new Date().toISOString()
            });
            Alert.alert('‚úÖ Notificaci√≥n Enviada', `${title}\n\n${body}`);
        } catch (error) {
            console.error('‚ùå Error enviando notificaci√≥n:', error);
            Alert.alert('‚ùå Error', 'No se pudo enviar la notificaci√≥n');
        }
    };

    const testOrderNotifications = () => {
        // Simular diferentes estados de pedido
        const estados = [
            { estado: 'aceptado', titulo: '‚úÖ Pedido Aceptado', mensaje: 'Tu pedido #TEST-001 ha sido aceptado y est√° siendo preparado.' },
            { estado: 'preparando', titulo: 'üë®‚Äçüç≥ Pedido en Preparaci√≥n', mensaje: 'Tu pedido #TEST-001 est√° siendo preparado. ¬°Pronto estar√° listo!' },
            { estado: 'listo', titulo: 'üéâ ¬°Tu Pedido Est√° Listo!', mensaje: 'Tu pedido #TEST-001 est√° listo para recoger. ¬°Ve al restaurante!' },
            { estado: 'entregado', titulo: 'üì¶ Pedido Entregado', mensaje: 'Tu pedido #TEST-001 ha sido entregado. ¬°Disfruta tu comida!' }
        ];

        estados.forEach((test, index) => {
            setTimeout(() => {
                testNotification(test.titulo, test.mensaje);
            }, index * 2000); // Enviar cada 2 segundos
        });
    };

    const testMonitoring = async () => {
        try {
            console.log('üß™ TEST - Iniciando prueba de monitoreo...');
            await iniciarMonitoreo();
            Alert.alert('‚úÖ Prueba Iniciada', 'Monitoreo iniciado manualmente. Revisa la consola para ver los logs.');
        } catch (error) {
            console.error('‚ùå TEST - Error en prueba de monitoreo:', error);
            Alert.alert('‚ùå Error', 'No se pudo iniciar la prueba de monitoreo');
        }
    };

    return (
        <SafeAreaView className="flex-1 bg-white">
            <ScrollView className="flex-1 px-5 py-6">
                {/* Header */}
                <View className="mb-6">
                    <Text className="text-2xl font-JakartaBold text-[#132e3c] mb-2">
                        üîî Prueba de Notificaciones
                    </Text>
                    <Text className="text-gray-600 font-JakartaMedium">
                        Prueba el sistema de notificaciones de la aplicaci√≥n
                    </Text>
                </View>

                {/* Estado del sistema */}
                <View className="bg-blue-50 rounded-xl p-4 mb-6">
                    <Text className="text-blue-800 font-JakartaBold text-lg mb-3">
                        üìä Estado del Sistema
                    </Text>

                    <View className="space-y-2">
                        <View className="flex-row items-center justify-between">
                            <Text className="text-blue-700 font-JakartaMedium">Notificaciones Locales:</Text>
                            <Text className="text-green-600 font-JakartaMedium text-xs">
                                ‚úÖ Disponibles
                            </Text>
                        </View>

                        <View className="flex-row items-center justify-between">
                            <Text className="text-blue-700 font-JakartaMedium">Usuario:</Text>
                            <Text className="text-blue-600 font-JakartaMedium text-xs">
                                {user?.email || 'No autenticado'}
                            </Text>
                        </View>

                        <View className="flex-row items-center justify-between">
                            <Text className="text-blue-700 font-JakartaMedium">Monitoreo en Segundo Plano:</Text>
                            <Text className={`font-JakartaMedium text-xs ${isMonitoring ? 'text-green-600' : 'text-red-600'}`}>
                                {isMonitoring ? 'üü¢ Activo' : 'üî¥ Inactivo'}
                            </Text>
                        </View>

                        <View className="flex-row items-center justify-between">
                            <Text className="text-blue-700 font-JakartaMedium">Pedidos Monitoreados:</Text>
                            <Text className="text-blue-600 font-JakartaMedium text-xs">
                                {lastPedidos.length} pedidos
                            </Text>
                        </View>
                    </View>
                </View>

                {/* Pruebas b√°sicas */}
                <View className="mb-6">
                    <Text className="text-lg font-JakartaBold text-[#132e3c] mb-3">
                        üß™ Pruebas B√°sicas
                    </Text>

                    <TouchableOpacity
                        onPress={() => testNotification('üîî Prueba Simple', 'Esta es una notificaci√≥n de prueba b√°sica.')}
                        className="bg-blue-500 p-4 rounded-xl mb-3"
                    >
                        <Text className="text-white font-JakartaBold text-center">
                            Enviar Notificaci√≥n Simple
                        </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                        onPress={() => testNotification('üéâ ¬°√âxito!', '¬°La operaci√≥n se complet√≥ exitosamente!')}
                        className="bg-green-500 p-4 rounded-xl mb-3"
                    >
                        <Text className="text-white font-JakartaBold text-center">
                            Notificaci√≥n de √âxito
                        </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                        onPress={() => testNotification('‚ö†Ô∏è Advertencia', 'Hay algo que debes revisar.')}
                        className="bg-yellow-500 p-4 rounded-xl mb-3"
                    >
                        <Text className="text-white font-JakartaBold text-center">
                            Notificaci√≥n de Advertencia
                        </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                        onPress={() => testNotification('‚ùå Error', 'Ocurri√≥ un error inesperado.')}
                        className="bg-red-500 p-4 rounded-xl"
                    >
                        <Text className="text-white font-JakartaBold text-center">
                            Notificaci√≥n de Error
                        </Text>
                    </TouchableOpacity>
                </View>

                {/* Pruebas de monitoreo */}
                <View className="mb-6">
                    <Text className="text-lg font-JakartaBold text-[#132e3c] mb-3">
                        üîç Pruebas de Monitoreo
                    </Text>

                    <TouchableOpacity
                        onPress={testMonitoring}
                        className="bg-purple-500 p-4 rounded-xl mb-3"
                    >
                        <Text className="text-white font-JakartaBold text-center">
                            üß™ Probar Monitoreo Manual
                        </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                        onPress={() => {
                            detenerMonitoreo();
                            Alert.alert('‚úÖ Detenido', 'Monitoreo detenido manualmente');
                        }}
                        className="bg-orange-500 p-4 rounded-xl mb-3"
                    >
                        <Text className="text-white font-JakartaBold text-center">
                            üõë Detener Monitoreo
                        </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                        onPress={() => {
                            console.log('üìã DEBUG - Pedidos actuales:', lastPedidos);
                            Alert.alert('üìã Debug', `Pedidos monitoreados: ${lastPedidos.length}\nRevisa la consola para m√°s detalles.`);
                        }}
                        className="bg-gray-500 p-4 rounded-xl"
                    >
                        <Text className="text-white font-JakartaBold text-center">
                            üìã Ver Pedidos Monitoreados
                        </Text>
                    </TouchableOpacity>
                </View>

                {/* Pruebas de pedidos */}
                <View className="mb-6">
                    <Text className="text-lg font-JakartaBold text-[#132e3c] mb-3">
                        üçΩÔ∏è Pruebas de Pedidos
                    </Text>

                    <TouchableOpacity
                        onPress={testOrderNotifications}
                        className="bg-purple-500 p-4 rounded-xl mb-3"
                    >
                        <Text className="text-white font-JakartaBold text-center">
                            Simular Secuencia de Estados de Pedido
                        </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                        onPress={() => testNotification('üçΩÔ∏è ¬°Nuevo Pedido Creado!', 'Tu pedido #TEST-002 ha sido enviado al restaurante.')}
                        className="bg-orange-500 p-4 rounded-xl"
                    >
                        <Text className="text-white font-JakartaBold text-center">
                            Simular Nuevo Pedido
                        </Text>
                    </TouchableOpacity>
                </View>

                {/* Informaci√≥n adicional */}
                <View className="bg-gray-50 rounded-xl p-4">
                    <Text className="text-gray-800 font-JakartaBold text-sm mb-2">
                        ‚ÑπÔ∏è Informaci√≥n
                    </Text>
                    <Text className="text-gray-600 font-JakartaMedium text-xs leading-5">
                        ‚Ä¢ Las notificaciones locales funcionan inmediatamente{'\n'}
                        ‚Ä¢ El monitoreo en segundo plano se ejecuta cada 30 segundos{'\n'}
                        ‚Ä¢ RESTAURANTE: Notifica cuando recibe nuevos pedidos{'\n'}
                        ‚Ä¢ USUARIO: Notifica cuando el restaurante cambia el estado{'\n'}
                        ‚Ä¢ Estados: Aceptado, Preparando, Listo, Entregado, Cancelado{'\n'}
                        ‚Ä¢ Revisa la consola para ver logs de debug{'\n'}
                        ‚Ä¢ Usa "Probar Monitoreo Manual" para diagnosticar{'\n'}
                        ‚Ä¢ Las notificaciones push est√°n deshabilitadas temporalmente
                    </Text>
                </View>

                {/* Espaciado inferior */}
                <View className="h-8" />
            </ScrollView>
        </SafeAreaView>
    );
};

export default TestNotifications;
